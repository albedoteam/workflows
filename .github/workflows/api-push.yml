name: Albedo Team CI SDK

on:
  workflow_call:
    secrets:
        NUGET_SOURCE:
          required: true
        NUGET_API_KEY:
          required: true
        PROJECT_NAMESPACE:
          required: true
          
jobs:
  set-ci-configuration:
    name: set project ci configuration
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-checker.outputs.version }}
      timestamp: ${{ steps.version-checker.outputs.timestamp }}
      artifact_path_cicd: ${{ secrets.PROJECT_NAMESPACE }}_${{ github.ref_name }}_${{ steps.version-checker.outputs.version }}_${{ steps.version-checker.outputs.timestamp }}_cicd
      artifact_path_bin: ${{ secrets.PROJECT_NAMESPACE }}_${{ github.ref_name }}_${{ steps.version-checker.outputs.version }}_${{ steps.version-checker.outputs.timestamp }}_bin
      artifact_path_nupkg: ${{ secrets.PROJECT_NAMESPACE }}_${{ github.ref_name }}_${{ steps.version-checker.outputs.version }}_${{ steps.version-checker.outputs.timestamp }}_nupkg
    steps:
    
    - uses: actions/checkout@v3
      name: checkout

    - name: version checker
      uses: albedoteam/version-checker@v1.0.1
      id: version-checker

  test-and-publish:
    name: test and publish
    runs-on: ubuntu-latest
    needs: [set-ci-configuration]
    outputs:
      project_version: ${{ steps.project_version.outputs.version }}
    steps:

    - uses: actions/checkout@v3
      name: checkout

    - name: setup .net
      uses: actions/setup-dotnet@v3

    - name: dotnet nuget add source github.com/albedoteam
      run: dotnet nuget add source $source -n github --username albedocodes --password $api_key --store-password-in-clear-text
      env:
        source: ${{ secrets.NUGET_SOURCE }}
        api_key: ${{ secrets.NUGET_API_KEY }}

    - run: dotnet restore
      name: dotnet restore

    - name: dotnet build
      run: dotnet build --configuration $configuration --no-restore
      env:
        configuration: ${{ github.ref_name == 'main' && 'Release' || 'Debug' }}
      
    - name: dotnet test
      run: dotnet test --no-restore --verbosity normal
  
    - name: dotnet publish
      if: ${{ github.event_name == 'push' }}
      run: dotnet publish --configuration $configuration --no-restore -output build
      env:
        configuration: ${{ github.ref_name == 'main' && 'Release' || 'Debug' }}

    - name: set build number
      run: echo "build_number=${{github.run_number}}${{github.run_number}}" >> $GITHUB_OUTPUT
      id: build_number

    - name: set project version
      run: echo "version=$version$rc" >> $GITHUB_OUTPUT
      id: project_version
      env:
        version: ${{ needs.set-ci-configuration.outputs.version }}
        rc: ${{ github.ref_name != 'main' && format('.{0}-{1}', steps.build_number.outputs.build_number, github.run_attempt) || '' }}

    - name: publish cicd artifacts
      if: ${{ github.event_name == 'push' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact_path_cicd }}
        path: |
          src/_cicd
        
    - name: publish build artifacts
      if: ${{ github.event_name == 'push' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.artifact_path_bin }}
        path: |
          build

  deployment:
    name: deploy
    runs-on: ubuntu-latest
    needs: [set-ci-configuration, test-and-publish]
    environment: ${{ github.ref_name }}
    steps:

    - uses: actions/checkout@v3
      name: checkout

    - name: download cicd artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.set-ci-configuration.outputs.artifact_path_cicd }}

    - name: download bin artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.set-ci-configuration.outputs.artifact_path_bin }}

    - name: test
      run: echo 'ls -a'

  create-tag-release:
    name: create tag and release
    runs-on: ubuntu-latest
    needs: [set-ci-configuration, test-and-pack, deployment]
    environment: ${{ github.ref_name }}
    steps:

    - uses: actions/checkout@v3
      name: checkout

    - name: create tag and release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ needs.test-and-publish.outputs.project_version }}
        release_name: v${{ needs.test-and-publish.outputs.project_version }}
        draft: false
        prerelease: ${{ github.ref_name == 'rc' }}